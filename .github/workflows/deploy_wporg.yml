name: Deploy to WordPress.org (manual version)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 1.0.4)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (no SVN commit)'
        required: true
        type: boolean
        default: false
      fail_on_mismatch:
        description: 'Fail if readme/plugin header versions differ'
        required: true
        type: boolean
        default: true
      generate_zip:
        description: 'Generate plugin zip'
        required: true
        type: boolean
        default: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # --- твоите настройки ---
      SLUG: bizzio-sync-for-woocommerce          # wp.org slug
      BUILD_DIR: bizzio-sync-for-woocommerce     # папката на плъгина в репото
      ASSETS_DIR: assets                         # ако нямаш assets, може да я махнеш

      # --- SVN креденшъли от Secrets ---
      SVN_USERNAME: ${{ secrets.SVN_USERNAME }}   # или WP_SVN_USERNAME
      SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}   # или WP_SVN_PASSWORD

      # --- флагове към скрипта ---
      INPUT_DRY_RUN: ${{ inputs.dry_run }}
      INPUT_GENERATE_ZIP: ${{ inputs.generate_zip }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show layout (debug)
        run: |
          pwd
          ls -la
          ls -la "$BUILD_DIR" || true
          ls -la "$ASSETS_DIR" || true

      # 1) sanitize ръчния input и сложи VERSION в env
      - name: Normalize & export VERSION
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          raw="${{ inputs.version }}"
          # махни водещо 'v' (v1.0.4 -> 1.0.4)
          ver="${raw#v}"

          # забрани очевидно невалидни стойности
          if [[ -z "$ver" || "$ver" == "trunk" || "$ver" == refs/* || "$ver" == heads/* ]]; then
            echo "❌ Invalid version: $raw"; exit 1
          fi

          # по желание: базова проверка за формат (семвер-ish)
          if ! [[ "$ver" =~ ^[0-9]+(\.[0-9]+){1,2}([.-][0-9A-Za-z]+)?$ ]]; then
            echo "⚠️ Version \"$ver\" is unusual. Continuing…"
          fi

          echo "VERSION=$ver" >> "$GITHUB_ENV"
          echo "version=$ver" >> "$GITHUB_OUTPUT"
          echo "✅ VERSION set to $ver"

      # 2) (по избор) сверка readme.txt и главния .php
      - name: Validate readme & plugin headers
        if: inputs.fail_on_mismatch == true
        shell: bash
        run: |
          set -euo pipefail
          READM="$BUILD_DIR/readme.txt"
          MAINPHP="$(ls "$BUILD_DIR"/*.php | head -n1 || true)"

          [[ -f "$READM" ]] || { echo "readme.txt not found at $READM"; exit 1; }
          [[ -f "$MAINPHP" ]] || { echo "Main plugin PHP not found in $BUILD_DIR"; exit 1; }

          rd=$(sed -nE 's/^[[:space:]]*Stable tag:[[:space:]]*([^[:space:]]+).*$/\1/ip' "$READM" | head -n1 | tr -d '[:space:]')
          ph=$(sed -nE 's/^[[:space:]]*(\* )?Version:[[:space:]]*([^[:space:]]+).*$/\2/ip' "$MAINPHP" | head -n1 | tr -d '[:space:]')
          want="${{ steps.ver.outputs.version }}"

          echo "Detected: readme=$rd plugin=$ph target=$want"

          [[ -z "$rd" || -z "$ph" ]] && { echo "❌ Missing Stable tag or Version header"; exit 1; }
          [[ "$rd" != "$want" ]] && { echo "❌ Stable tag ($rd) != input version ($want)"; exit 1; }
          [[ "$ph" != "$want" ]] && { echo "❌ Plugin header Version ($ph) != input version ($want)"; exit 1; }

          echo "✅ readme & plugin header match $want"

      # 3) пусни оригиналния ти deploy.sh (ще ползва VERSION от env)
      - name: Run original deploy script
        shell: bash
        run: bash .github/scripts/deploy.sh
