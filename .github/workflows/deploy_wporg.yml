name: Deploy main → WordPress SVN (trunk only)

on:
  workflow_dispatch: # Позволява ръчно стартиране от GitHub UI
  push:
    branches: [ main ]
    paths:
      - 'bizzio-sync-for-woocommerce/**'
      - 'assets/**'
      - '.gitattributes'
      - '.distignore'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no commit to SVN)'
        type: boolean
        required: true
        default: false

jobs:
  deploy-trunk:
    runs-on: ubuntu-latest
    concurrency:
      group: wporg-trunk-deploy
      cancel-in-progress: false

    env:
      # WordPress.org plugin slug (променяй, ако е различен от директорията):
      SLUG: bizzio-sync-for-woocommerce
      # Директорията в репото, където е плъгинът:
      BUILD_DIR: bizzio-sync-for-woocommerce
      # Ако имаш изображения за wp.org, дръж ги в /assets (по избор):
      ASSETS_DIR: assets

      # Secrets (добави ги в Settings → Secrets and variables → Actions)
      SVN_USERNAME: ${{ secrets.WP_SVN_USERNAME }}
      SVN_PASSWORD: ${{ secrets.WP_SVN_PASSWORD }}

      # Управление на dry-run
      INPUT_DRY_RUN: ${{ github.event.inputs.dry_run }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Subversion & zip installed
        run: |
          sudo apt-get update -y
          sudo apt-get install -y subversion zip

      - name: Validate required files
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -d "$BUILD_DIR" ]]; then
            echo "❌ BUILD_DIR not found: $BUILD_DIR"; exit 1
          fi
          if [[ ! -f "$BUILD_DIR/readme.txt" ]]; then
            echo "❌ readme.txt is required in $BUILD_DIR (for wp.org)"; exit 1
          fi

      - name: Prepare export (use .distignore or .gitattributes)
        id: export
        shell: bash
        run: |
          set -euo pipefail
          WORK="${GITHUB_WORKSPACE}"
          SRC="${WORK}/${BUILD_DIR}"
          OUT="${RUNNER_TEMP}/wp-export"
          mkdir -p "$OUT"

          if [[ -f "${WORK}/.distignore" ]]; then
            echo "ℹ︎ Using .distignore"
            rsync -rc --exclude-from="${WORK}/.distignore" "${SRC}/" "${OUT}/" --delete --delete-excluded
          else
            echo "ℹ︎ Using .gitattributes export-ignore (fallback)"
            # Mark workspace safe (GitHub quirk)
            git config --global --add safe.directory "$WORK"
            git config --global user.email "github-actions@users.noreply.github.com"
            git config --global user.name "github-actions"
            # Sync deleted staged
            test "$(git ls-files --deleted)" && git rm "$(git ls-files --deleted)" || true
            # Temporary archive dir
            TMP="${RUNNER_TEMP}/git-archive"
            mkdir -p "$TMP"
            # Create minimal .gitattributes if missing
            if [[ ! -f "${WORK}/.gitattributes" ]]; then
              cat > "${WORK}/.gitattributes" <<'EOF'
/assets export-ignore
/.gitattributes export-ignore
/.gitignore export-ignore
/.github export-ignore
EOF
              git add .gitattributes && git commit -m "Add .gitattributes for export (CI)"
            fi
            (cd "${SRC}" && git archive --format=tar HEAD) | tar -x -C "$OUT"
          fi

          echo "export_dir=$OUT" >> "$GITHUB_OUTPUT"

      - name: Checkout WP.org SVN
        id: svn
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${SVN_USERNAME:-}" || -z "${SVN_PASSWORD:-}" ]]; then
            if [[ "${INPUT_DRY_RUN}" == "true" ]]; then
              echo "⚠︎ Dry run w/o credentials — allowed."
            else
              echo "❌ Missing SVN credentials"; exit 1
            fi
          fi
          SVN_URL="https://plugins.svn.wordpress.org/${SLUG}/"
          SVN_DIR="${RUNNER_TEMP}/svn-${SLUG}"
          echo "SVN_URL=$SVN_URL" >> "$GITHUB_OUTPUT"
          echo "SVN_DIR=$SVN_DIR" >> "$GITHUB_OUTPUT"
          svn checkout --depth immediates "$SVN_URL" "$SVN_DIR"
          cd "$SVN_DIR"
          svn update --set-depth infinity trunk
          # assets са по избор
          if [[ -d "$SVN_DIR/assets" || -d "${GITHUB_WORKSPACE}/${ASSETS_DIR}" ]]; then
            svn update --set-depth infinity assets || true
          fi

      - name: Sync code to trunk (no tag)
        shell: bash
        run: |
          set -euo pipefail
          SVN_DIR="${{ steps.svn.outputs.SVN_DIR }}"
          EXPORT_DIR="${{ steps.export.outputs.export_dir }}"
          rsync -rc "${EXPORT_DIR}/" "${SVN_DIR}/trunk/" --delete --delete-excluded

      - name: Sync assets (optional)
        if: hashFiles('assets/**') != ''
        shell: bash
        run: |
          set -euo pipefail
          SVN_DIR="${{ steps.svn.outputs.SVN_DIR }}"
          ASSETS="${GITHUB_WORKSPACE}/${ASSETS_DIR}"
          if [[ -d "$ASSETS" ]]; then
            rsync -rc "$ASSETS/" "${SVN_DIR}/assets/" --delete
            # set correct mime types (png/jpg/gif/svg)
            cd "${SVN_DIR}"
            if compgen -G "assets/*.png" > /dev/null; then svn propset svn:mime-type "image/png" assets/*.png || true; fi
            if compgen -G "assets/*.jpg" > /dev/null; then svn propset svn:mime-type "image/jpeg" assets/*.jpg || true; fi
            if compgen -G "assets/*.gif" > /dev/null; then svn propset svn:mime-type "image/gif" assets/*.gif || true; fi
            if compgen -G "assets/*.svg" > /dev/null; then svn propset svn:mime-type "image/svg+xml" assets/*.svg || true; fi
          else
            echo "ℹ︎ No /assets found in repo — skipping."
          fi

      - name: SVN add/remove and status
        shell: bash
        run: |
          set -euo pipefail
          SVN_DIR="${{ steps.svn.outputs.SVN_DIR }}"
          cd "$SVN_DIR"
          svn add . --force > /dev/null
          svn status | awk '/^\!/{print $2}' | xargs -r svn rm > /dev/null
          echo "---- SVN status ----"
          svn status

      - name: Commit to SVN trunk
        if: inputs.dry_run != true
        shell: bash
        run: |
          set -euo pipefail
          SVN_DIR="${{ steps.svn.outputs.SVN_DIR }}"
          cd "$SVN_DIR"
          svn commit -m "Sync trunk from GitHub main" --no-auth-cache --non-interactive \
            --username "$SVN_USERNAME" --password "$SVN_PASSWORD"

      - name: Dry-run note
        if: inputs.dry_run == true
        run: echo "Dry run completed — no SVN commit performed."
