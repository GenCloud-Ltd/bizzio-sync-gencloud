name: üìä GitHub Traffic Monitor

on:
  schedule:
    - cron: "0 */4 * * *" # –ü—É—Å–∫–∞ —Å–µ –Ω–∞ –≤—Å–µ–∫–∏ 4 —á–∞—Å–∞ (–ø–æ-–æ–ø—Ç–∏–º–∞–ª–Ω–æ –æ—Ç 30 –º–∏–Ω)
  workflow_dispatch: # –ü–æ–∑–≤–æ–ª—è–≤–∞ —Ä—ä—á–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ

permissions:
  contents: read
  actions: read

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 1 # –°–∞–º–æ –ø–æ—Å–ª–µ–¥–Ω–∏—è—Ç commit

      - name: Create traffic directory
        run: mkdir -p .traffic

      - name: Fetch GitHub Traffic Data
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -e  # –°–ø–∏—Ä–∞ –ø—Ä–∏ –≥—Ä–µ—à–∫–∞

          # –§—É–Ω–∫—Ü–∏—è –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏
          fetch_data() {
            local endpoint="$1"
            local output="$2"
            local retries=3
            
            for i in $(seq 1 $retries); do
              if curl -s -f -w "%{http_code}" \
                -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/$REPO/$endpoint" \
                -o "$output.tmp"; then
                mv "$output.tmp" "$output"
                echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏ –æ—Ç $endpoint"
                return 0
              else
                echo "‚ö†Ô∏è –û–ø–∏—Ç $i/$retries –Ω–µ—É—Å–ø–µ—à–µ–Ω –∑–∞ $endpoint"
                sleep $((i * 2))
              fi
            done
            
            echo "‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç $endpoint"
            echo '{"count": 0, "uniques": 0}' > "$output"
            return 1
          }

          # –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ —Å retry –ª–æ–≥–∏–∫–∞
          fetch_data "traffic/clones" ".traffic/clones.json"
          fetch_data "traffic/views" ".traffic/views.json"
          fetch_data "releases" ".traffic/releases.json"

      - name: Load previous data
        run: |
          # –û–ø–∏—Ç–∞–π –¥–∞ –∑–∞—Ä–µ–¥–∏—à –ø—Ä–µ–¥–∏—à–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –æ—Ç –ø—Ä–µ–¥–∏—à–µ–Ω run
          if [ -f ".traffic-old/clones.json" ]; then
            echo "üìÅ –ù–∞–º–µ—Ä–µ–Ω–∏ –ø—Ä–µ–¥–∏—à–Ω–∏ –¥–∞–Ω–Ω–∏"
          else
            echo "üÜï –ü—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ - —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –±–∞–∑–æ–≤–∏ —Ñ–∞–π–ª–æ–≤–µ"
            mkdir -p .traffic-old
            echo '{"count": 0, "uniques": 0}' > .traffic-old/clones.json
            echo '{"count": 0, "uniques": 0}' > .traffic-old/views.json
            echo '[]' > .traffic-old/releases.json
          fi

      - name: Analyze traffic changes
        id: analyze
        run: |
          set -e

          # –§—É–Ω–∫—Ü–∏—è –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ —Å jq
          safe_extract() {
            local file="$1"
            local query="$2"
            local default="$3"
            
            if [ -f "$file" ] && [ -s "$file" ]; then
              jq -r "$query // $default" "$file" 2>/dev/null || echo "$default"
            else
              echo "$default"
            fi
          }

          # –¢–µ–∫—É—â–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
          cur_clones=$(safe_extract ".traffic/clones.json" ".count" "0")
          cur_views=$(safe_extract ".traffic/views.json" ".count" "0")
          cur_unique_clones=$(safe_extract ".traffic/clones.json" ".uniques" "0")
          cur_unique_views=$(safe_extract ".traffic/views.json" ".uniques" "0")
          cur_downloads=$(safe_extract ".traffic/releases.json" "[.[].assets[]?.download_count] | add" "0")

          # –ü—Ä–µ–¥–∏—à–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
          old_clones=$(safe_extract ".traffic-old/clones.json" ".count" "0")
          old_views=$(safe_extract ".traffic-old/views.json" ".count" "0")
          old_unique_clones=$(safe_extract ".traffic-old/clones.json" ".uniques" "0")
          old_unique_views=$(safe_extract ".traffic-old/views.json" ".uniques" "0")
          old_downloads=$(safe_extract ".traffic-old/releases.json" "[.[].assets[]?.download_count] | add" "0")

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø—Ä–æ–º–µ–Ω–∏
          changed=0
          msg=""

          # Clones –ø—Ä–æ–≤–µ—Ä–∫–∞
          if [ "$cur_clones" -gt "$old_clones" ] || [ "$cur_unique_clones" -gt "$old_unique_clones" ]; then
            clone_diff=$((cur_clones - old_clones))
            unique_clone_diff=$((cur_unique_clones - old_unique_clones))
            msg="${msg}üì• –ù–æ–≤–∏ –∫–ª–æ–Ω–∏—Ä–∞–Ω–∏—è: $clone_diff (–æ–±—â–æ: $cur_clones)\\n"
            msg="${msg}üë§ –£–Ω–∏–∫–∞–ª–Ω–∏ –∫–ª–æ–Ω–∏—Ä–∞–Ω–∏—è: +$unique_clone_diff (–æ–±—â–æ: $cur_unique_clones)\\n"
            changed=1
          fi

          # Views –ø—Ä–æ–≤–µ—Ä–∫–∞
          if [ "$cur_views" -gt "$old_views" ] || [ "$cur_unique_views" -gt "$old_unique_views" ]; then
            view_diff=$((cur_views - old_views))
            unique_view_diff=$((cur_unique_views - old_unique_views))
            msg="${msg}üëÅÔ∏è –ù–æ–≤–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è: $view_diff (–æ–±—â–æ: $cur_views)\\n"
            msg="${msg}üîç –£–Ω–∏–∫–∞–ª–Ω–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: +$unique_view_diff (–æ–±—â–æ: $cur_unique_views)\\n"
            changed=1
          fi

          # Downloads –ø—Ä–æ–≤–µ—Ä–∫–∞
          if [ "$cur_downloads" -gt "$old_downloads" ]; then
            download_diff=$((cur_downloads - old_downloads))
            msg="${msg}üì¶ –ù–æ–≤–∏ —Ç–µ–≥–ª–µ–Ω–∏—è: $download_diff (–æ–±—â–æ: $cur_downloads)\\n"
            changed=1
          fi

          # –î–æ–±–∞–≤–∏ –≤—Ä–µ–º–µ–≤–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          if [ "$changed" -eq 1 ]; then
            timestamp=$(date '+%d.%m.%Y %H:%M UTC')
            msg="üïê $timestamp\\n\\n$msg"
            
            # –î–æ–±–∞–≤–∏ –ª–∏–Ω–∫ –∫—ä–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ—Ç–æ
            msg="${msg}\\nüîó –•—Ä–∞–Ω–∏–ª–∏—â–µ: https://github.com/${{ github.repository }}"
          fi

          # Export —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
          echo "changed=$changed" >> $GITHUB_OUTPUT
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo -e "$msg" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # –õ–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          echo "üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤—ä—Ä—à–µ–Ω:"
          echo "  Clones: $old_clones ‚Üí $cur_clones"
          echo "  Views: $old_views ‚Üí $cur_views"
          echo "  Downloads: $old_downloads ‚Üí $cur_downloads"
          echo "  Changed: $changed"

      - name: Send Telegram notification
        if: steps.analyze.outputs.changed == '1'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT: ${{ secrets.TELEGRAM_CHAT }}
        run: |
          set -e

          # –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ —Å retry
          send_telegram() {
            local retries=3
            local message="$1"
            
            for i in $(seq 1 $retries); do
              if curl -s -f -X POST \
                "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
                -H "Content-Type: application/json" \
                -d "{
                  \"chat_id\": \"$TELEGRAM_CHAT\",
                  \"text\": \"üìä GitHub Traffic Report\\n${{ github.repository }}\\n\\n$message\",
                  \"parse_mode\": \"HTML\",
                  \"disable_web_page_preview\": false
                }"; then
                echo "‚úÖ –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
                return 0
              else
                echo "‚ö†Ô∏è –û–ø–∏—Ç $i/$retries –Ω–µ—É—Å–ø–µ—à–µ–Ω –∑–∞ –∏–∑–ø—Ä–∞—â–∞–Ω–µ"
                sleep $((i * 2))
              fi
            done
            
            echo "‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ"
            return 1
          }

          send_telegram "${{ steps.analyze.outputs.message }}"

      - name: Update historical data
        if: always() # –í–∏–Ω–∞–≥–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–π –¥–∞–Ω–Ω–∏—Ç–µ
        run: |
          # –ó–∞–ø–∞–∑–∏ —Ç–µ–∫—É—â–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∫–∞—Ç–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏
          cp .traffic/*.json .traffic-old/ 2>/dev/null || true

          # –û–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ: –∑–∞–ø–∞–∑–∏ –¥–∞–Ω–Ω–∏—Ç–µ –∫–∞—Ç–æ artifact –∑–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ
          echo "üìÅ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –¥–∞–Ω–Ω–∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–∏"

      - name: Upload traffic data artifact
        if: failure() # –°–∞–º–æ –ø—Ä–∏ –≥—Ä–µ—à–∫–∞ –∑–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ
        uses: actions/upload-artifact@v4
        with:
          name: traffic-data-debug
          path: .traffic/
          retention-days: 7

  # –û–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω job –∑–∞ weekly summary
  weekly-summary:
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 * * 0' # –ù–µ–¥–µ–ª—è –≤ –ø–æ–ª—É–Ω–æ—â
    needs: monitor
    steps:
      - name: Send weekly summary
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT: ${{ secrets.TELEGRAM_CHAT }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{
              \"chat_id\": \"$TELEGRAM_CHAT\",
              \"text\": \"üìÖ –°–µ–¥–º–∏—á–µ–Ω –æ—Ç—á–µ—Ç –∑–∞ ${{ github.repository }}\\n\\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—ä—Ç —Ä–∞–±–æ—Ç–∏ –Ω–æ—Ä–º–∞–ª–Ω–æ. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ GitHub Analytics –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\",
              \"parse_mode\": \"HTML\"
            }"
